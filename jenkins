pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        ECR_REPO_NAME = 'huntersamplejavaapp'
        ECR_REPO_URI_FINAL = '345594588963.dkr.ecr.us-east-1.amazonaws.com'
        JAVA_HOME = tool name: 'jdk17', type: 'jdk'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
        SONARQUBE = 'MySonarQube'

        // ‚úÖ Dynamic image tag based on Jenkins build number
        IMAGE_TAG = "${BUILD_NUMBER}"
    }

    tools {
        jdk 'jdk17'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/hunterfrantz14/huntersamplejavaapp.git'
            }
        }

        stage('Build with Maven') {
            steps {
                sh './mvnw clean package'
            }
        }

        stage('OWASP Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '--scan target/', odcInstallation: 'OWASP'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${env.SONARQUBE}") {
                    sh './mvnw clean verify sonar:sonar'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Login to AWS ECR & Ensure Repo Exists') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'AWSECRLoginForJenkins',
                                                 usernameVariable: 'AWS_ACCESS_KEY_ID',
                                                 passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                        set -e

                        echo "üîê Configuring AWS CLI..."
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set region $AWS_REGION

                        echo "üîê Verifying identity..."
                        aws sts get-caller-identity

                        echo "üîê Logging in to ECR..."
                        aws ecr get-login-password --region $AWS_REGION | \
                        docker login --username AWS --password-stdin $ECR_REPO_URI_FINAL

                        echo "üì¶ Checking if ECR repo exists..."
                        aws ecr describe-repositories --repository-names $ECR_REPO_NAME --region $AWS_REGION --output json || \
                        aws ecr create-repository --repository-name $ECR_REPO_NAME --region $AWS_REGION
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    echo "üê≥ Building Docker image with tag: $IMAGE_TAG"
                    docker build -t $ECR_REPO_URI_FINAL/$ECR_REPO_NAME:$IMAGE_TAG -f Dockerfile .
                '''
            }
        }

        stage('Push Docker Image to ECR') {
            steps {
                sh '''
                    echo "üì§ Pushing Docker image to: $ECR_REPO_NAME:$IMAGE_TAG"
                    docker push $ECR_REPO_URI_FINAL/$ECR_REPO_NAME:$IMAGE_TAG
                '''
            }
        }

        stage('Trigger CD') {
            steps {
                echo "üöÄ Triggering CD pipeline with image tag: $IMAGE_TAG"
                build job: 'CD-pipeline', wait: true, parameters: [
                    string(name: 'IMAGE_TAG', value: "${IMAGE_TAG}")
                ]
            }
        }
    }

    post {
        success {
            echo "‚úÖ CI pipeline complete. Image tagged as: $IMAGE_TAG"
        }
        failure {
            echo '‚ùå CI pipeline failed.'
        }
    }
}