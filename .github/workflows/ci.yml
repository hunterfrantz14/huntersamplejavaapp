name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # üîπ Cache the OWASP Dependency-Check database between runs
      - name: Cache OWASP Dependency-Check DB
        uses: actions/cache@v3
        with:
          path: odc-data
          key: ${{ runner.os }}-odc-db

      - name: Build with Maven
        run: ./mvnw clean package

      - name: Run OWASP Dependency Check (with DB fix)
        run: |
          mkdir -p ${{ github.workspace }}/reports
          mkdir -p ${{ github.workspace }}/odc-data

          # Run OWASP DC with local DB (will auto-create if missing)
          docker run --rm \
            -v ${{ github.workspace }}:/src \
            -v ${{ github.workspace }}/reports:/report \
            -v ${{ github.workspace }}/odc-data:/data \
            owasp/dependency-check:latest \
            --project "huntersamplejavaapp" \
            --scan /src/target \
            --format HTML \
            --out /report \
            --data /data \
            --disableRetireJS \
            --log /report/odc.log

      - name: Upload OWASP Report + Logs
        uses: actions/upload-artifact@v4
        with:
          name: owasp-output
          path: reports

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw clean verify sonar:sonar \
            -Dsonar.projectKey=huntersamplejavaapp \
            -Dsonar.host.url=http://54.146.204.13:9000 \
            -Dsonar.login=$SONAR_TOKEN

      - name: SonarQube Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          echo "‚è≥ Waiting for SonarQube Quality Gate..."
          for i in {1..20}; do
            STATUS=$(curl -s -u $SONAR_TOKEN: \
              "http://54.146.204.13:9000/api/qualitygates/project_status?projectKey=huntersamplejavaapp" \
              | jq -r '.projectStatus.status')

            if [[ "$STATUS" == "OK" ]]; then
              echo "‚úÖ Quality Gate passed"
              exit 0
            elif [[ "$STATUS" == "ERROR" ]]; then
              echo "‚ùå Quality Gate failed"
              exit 1
            else
              echo "‚åõ Status: $STATUS (retrying in 30s)"
              sleep 30
            fi
          done

          echo "‚ùå Timed out waiting for Quality Gate result"
          exit 1
