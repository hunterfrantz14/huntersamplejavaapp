name: CI/CD Pipeline - Build, Scan, Deploy

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: hunter-ecs-cluster
  SERVICE_NAME: hunter-java-service
  TASK_DEF_FAMILY: hunter-task
  CONTAINER_NAME: hunter-container
  ECR_REPO_NAME: huntersamplejavaapp

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: ‚öôÔ∏è Build with Maven
        run: |
          chmod +x mvnw
          ./mvnw clean package

      - name: üìÇ Prepare OWASP folders
        run: |
          mkdir -p ${{ github.workspace }}/reports
          mkdir -p ${{ github.workspace }}/odc-data

      - name: üß™ Run OWASP Dependency Check (Offline)
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/src \
            -v ${{ github.workspace }}/reports:/report \
            -v ${{ github.workspace }}/odc-data:/data \
            owasp/dependency-check:latest \
            --project "huntersamplejavaapp" \
            --scan /src/target \
            --format "HTML,XML" \
            --out /report \
            --data /data \
            --disableNVD \
            --disableRetireJS \
            --log /report/odc.log || echo "‚ö†Ô∏è OWASP failed but continuing..."

      - name: üì§ Upload OWASP Report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-output
          path: reports

  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: üèóÔ∏è Build and Push Docker Image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          ECR_URI="${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }}"

          docker build -t $ECR_URI:${IMAGE_TAG} .
          docker push $ECR_URI:${IMAGE_TAG}

      - name: üíæ Save image tag for deployment
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

  deploy:
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: üîê Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üì¶ Register ECS Task Definition
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          ECR_URI="${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO_NAME }}"

          cat <<EOF > taskdef.json
          {
            "family": "${{ env.TASK_DEF_FAMILY }}",
            "executionRoleArn": "arn:aws:iam::${ACCOUNT_ID}:role/ecsTaskExecutionRole",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "containerDefinitions": [
              {
                "name": "${{ env.CONTAINER_NAME }}",
                "image": "${ECR_URI}:${{ env.IMAGE_TAG }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8081,
                    "protocol": "tcp"
                  }
                ]
              }
            ]
          }
EOF

          aws ecs register-task-definition --cli-input-json file://taskdef.json

      - name: üöÄ Update ECS Service
        run: |
          TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_DEF_FAMILY }} --query "taskDefinition.taskDefinitionArn" --output text)
          aws ecs update-service --cluster ${{ env.CLUSTER_NAME }} --service ${{ env.SERVICE_NAME }} --task-definition $TASK_DEF_ARN

