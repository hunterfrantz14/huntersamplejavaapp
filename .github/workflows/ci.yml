name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: ./mvnw clean package

      - name: Run OWASP Dependency Check (with update + log)
        run: |
          curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v9.2.0/dependency-check-9.2.0-release.zip -o dependency-check.zip
          unzip dependency-check.zip -d dependency-check
          ./dependency-check/dependency-check/bin/dependency-check.sh \
            --update \
            --project "huntersamplejavaapp" \
            --scan ./target \
            --format HTML \
            --out reports \
            --disableRetireJS \
            --log odc.log

      - name: Upload OWASP Report + Logs
        uses: actions/upload-artifact@v4
        with:
          name: owasp-output
          path: |
            reports
            odc.log

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./mvnw clean verify sonar:sonar \
            -Dsonar.projectKey=huntersamplejavaapp \
            -Dsonar.host.url=http://54.146.204.13:9000 \
            -Dsonar.login=$SONAR_TOKEN

      - name: SonarQube Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          echo "⏳ Waiting for SonarQube Quality Gate..."
          for i in {1..20}; do
            STATUS=$(curl -s -u $SONAR_TOKEN: \
              "http://54.146.204.13:9000/api/qualitygates/project_status?projectKey=huntersamplejavaapp" \
              | jq -r '.projectStatus.status')

            if [[ "$STATUS" == "OK" ]]; then
              echo "✅ Quality Gate passed"
              exit 0
            elif [[ "$STATUS" == "ERROR" ]]; then
              echo "❌ Quality Gate failed"
              exit 1
            else
              echo "⌛ Status: $STATUS (retrying in 30s)"
              sleep 30
            fi
          done

          echo "❌ Timed out waiting for Quality Gate result"
          exit 1
